//+------------------------------------------------------------------+
//| Market Bias TV-Style (Unified Green/Red Line, No shade) - MT5    |
//+------------------------------------------------------------------+
#property indicator_chart_window
#property indicator_buffers 6
#property indicator_plots   2

#property indicator_label1  "Market Bias Up (Green)"
#property indicator_type1   DRAW_LINE
#property indicator_color1  clrLime
#property indicator_width1  2

#property indicator_label2  "Market Bias Down (Red)"
#property indicator_type2   DRAW_LINE
#property indicator_color2  clrRed
#property indicator_width2  2

input int period = 100;
input int smoothing = 100;
input int oscillator = 7;

double lineUp[];
double lineDn[];
double ema_main[];
double ema_smooth[];
double osc[];
double osc_smooth[];

//+------------------------------------------------------------------+
//| EMA on Array Helper                                              |
//+------------------------------------------------------------------+
void CalcEMAonArray(const double &src[], double &dst[], int len, int per)
{
   if(per < 2) per = 2;
   double k = 2.0 / (per + 1);
   dst[0] = src[0];
   for(int i = 1; i < len; i++)
      dst[i] = k * src[i] + (1.0 - k) * dst[i - 1];
}

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
{
   SetIndexBuffer(0, lineUp, INDICATOR_DATA);
   SetIndexBuffer(1, lineDn, INDICATOR_DATA);
   SetIndexBuffer(2, ema_main, INDICATOR_CALCULATIONS);
   SetIndexBuffer(3, ema_smooth, INDICATOR_CALCULATIONS);
   SetIndexBuffer(4, osc, INDICATOR_CALCULATIONS);
   SetIndexBuffer(5, osc_smooth, INDICATOR_CALCULATIONS);

   PlotIndexSetInteger(0, PLOT_DRAW_TYPE, DRAW_LINE);
   PlotIndexSetInteger(1, PLOT_DRAW_TYPE, DRAW_LINE);

   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
{
   int begin = MathMax(period, MathMax(smoothing, oscillator));
   if(rates_total <= begin)
      return(0);

   int start = prev_calculated > 0 ? prev_calculated - 1 : 0;

   // „Õ«”»Â EMA «’·Ì —ÊÌ close (»œÊ‰ iMA)
   CalcEMAonArray(close, ema_main, rates_total, period);

   // „Õ«”»Â EMA smoothing —ÊÌ ema_main
   CalcEMAonArray(ema_main, ema_smooth, rates_total, smoothing);

   // «”Ì·« Ê— Ê EMA «”Ì·« Ê—
   for(int i = start; i < rates_total; i++)
      osc[i] = ema_main[i] - ema_smooth[i];

   CalcEMAonArray(osc, osc_smooth, rates_total, oscillator);

   // ›ﬁÿ œÊ Õ«· : Â—Ã« osc > osc_smooth Œÿ ”»“° Â—Ã« osc < osc_smooth Œÿ ﬁ—„“
   for(int i = start; i < rates_total; i++)
   {
      if(osc[i] > osc_smooth[i])
      {
         lineUp[i] = ema_main[i];
         lineDn[i] = EMPTY_VALUE;
      }
      else
      {
         lineUp[i] = EMPTY_VALUE;
         lineDn[i] = ema_main[i];
      }
   }

   return(rates_total);
}